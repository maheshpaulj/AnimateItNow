import argparse
import os
import re
import subprocess
import sys

import openai
import google.generativeai as genai

from dotenv import load_dotenv
load_dotenv()

# --- CONFIGURATION ---
# IMPORTANT: Do not hardcode your API key. Use an environment variable.
# 1. Get your key from https://openrouter.ai/keys
# 2. Set the environment variable:
#   - In Linux/macOS: export OPENROUTER_API_KEY="sk-or-..."
#   - In Windows:      set OPENROUTER_API_KEY="sk-or-..."
api_key = os.getenv("OPENROUTER_API_KEY")
if not api_key:
    print("‚ùå OPENROUTER_API_KEY is not set. Please create a .env file.")
    sys.exit(1)

# NEW: Initialize the OpenAI client to point to OpenRouter
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=api_key,
)

# You can change the default model here.
# Free models like 'mistralai/mistral-7b-instruct:free' are great for testing.
# 'anthropic/claude-3.5-sonnet' is a very powerful and recommended choice.
DEFAULT_MODEL = "deepseek/deepseek-chat:free"

def clean_generated_code(code):
    """
    Cleans the code generated by the LLM by removing markdown code fences.
    Example: ```python\nprint("Hello")\n``` -> print("Hello")
    """
    code = re.sub(r'^```python\s*\n', '', code, flags=re.MULTILINE)
    code = re.sub(r'\n```\s*$', '', code, flags=re.MULTILINE)
    code = re.sub(r'^```\s*\n', '', code, flags=re.MULTILINE)
    return code.strip()

def extract_class_name(code):
    """
    Extracts the first class name that inherits from Scene.
    Handles 'class MyScene(Scene):' and 'class MyScene(manim.Scene):'
    """
    match = re.search(r'class\s+(\w+)\s*\((?:manim\.)?Scene\)', code)
    return match.group(1) if match else None

def generate_manim_code(prompt, model_name, use_gemini=False):
    """
    Generates Manim code from a text prompt using the OpenRouter API.
    """
    system_prompt = """
You are an expert Manim programmer. Your task is to generate a single, self-contained, executable Python script for a Manim animation based on the user's description.

**Requirements:**
1.  **Imports:** Start with `from manim import *`.
2.  **Class Structure:** The code must contain one class that inherits from `Scene`.
3.  **Construct Method:** This class must have a `construct(self)` method where the animation logic resides.
4.  **No Placeholders:** The code must be complete and runnable. Do not include comments like "# your animation code here".
5.  **Output:** Provide ONLY the Python code. Do not include any explanations, introductory text, or markdown code fences.
6.  **No Comments:** Do not add explanatory comments to the Python code itself.
"""
    try:
        if use_gemini:
            gemini_key = os.getenv("GEMINI_API_KEY")
            if not gemini_key:
                print("‚ùå GEMINI_API_KEY not set in your .env file.")
                return None

            genai.configure(api_key=gemini_key)
            model = genai.GenerativeModel('gemini-2.5-pro')
            response = model.generate_content(
                [system_prompt, prompt]
            )

            generated_code = response.text
        else:
            print(f"ü§ñ Sending request to OpenRouter model: {model_name}...")
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt},
                ],
            )
            if not response.choices or not response.choices[0].message.content:
                print("Error: The API returned an empty response.")
                return None
            generated_code = response.choices[0].message.content

        return clean_generated_code(generated_code)


    except openai.APIError as e:
        print(f"‚ùå OpenRouter API Error: {e}")
        return None
    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(
        description='Generate Manim videos from natural language prompts using OpenRouter.',
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('prompt', help='A description of the animation you want to create.')
    parser.add_argument('--gemini', action='store_true', help="Use Gemini Pro 2.5 instead of OpenRouter")
    parser.add_argument('--output', '-o', default='generated_scene.py', help='Output filename for the Python script.')
    parser.add_argument(
        '--quality', '-q',
        choices=['l', 'm', 'h', 'p', 'k'],
        default='h',
        help="Video quality. Corresponds to Manim's quality flags:\n"
             "l: Low (480p15)\n m: Medium (720p30)\n h: High (1080p60)\n"
             "p: Production (1440p60)\n k: 4K (2160p60)"
    )
    parser.add_argument(
        '--model', '-m',
        default=DEFAULT_MODEL,
        help=f"The OpenRouter model to use for generation.\n(Default: {DEFAULT_MODEL})"
    )
    parser.add_argument('--no-render', action='store_true', help="Only generate the code; don't render the video.")
    parser.add_argument('--version', action='version', version='AnimateItNow 0.1.3 - Made by Mahesh Paul J')

    args = parser.parse_args()

    # Step 1: Generate Code
    print(f"‚ú® Generating Manim code for: '{args.prompt}'...")
    code = generate_manim_code(args.prompt, model_name=args.model, use_gemini=args.gemini)

    if not code:
        print("‚ùå Code generation failed. Exiting.")
        sys.exit(1)

    # Step 2: Save Code to File
    try:
        with open(args.output, 'w') as f:
            f.write(code)
        print(f"‚úÖ Generated Manim code saved to '{args.output}'")
    except IOError as e:
        print(f"‚ùå Error saving file '{args.output}': {e}")
        sys.exit(1)

    # Step 3: Render Video (unless disabled)
    if not args.no_render:
        class_name = extract_class_name(code)
        if class_name:
            print(f"üé¨ Found scene class: '{class_name}'. Starting render...")
            print(f"   (Quality: {args.quality}, File: {args.output})")

            cmd = ['manim', '-p', f'-q{args.quality}', args.output, class_name]

            try:
                result = subprocess.run(cmd, check=True, capture_output=True, text=True)
                print("\n‚úÖ Video rendered successfully!")
                print("--- Manim Output ---")
                print(result.stderr)
                print("--------------------")
            except FileNotFoundError:
                print("‚ùå Error: 'manim' command not found.")
                print("   Is Manim installed and in your system's PATH?")
                sys.exit(1)
            except subprocess.CalledProcessError as e:
                print(f"‚ùå An error occurred while rendering with Manim (exit code {e.returncode}).")
                print("   The generated code might have a bug. Check the error message below.")
                print("--- Manim Error Output ---")
                print(e.stderr)
                print("--------------------------")
                sys.exit(1)
        else:
            print("‚ö†Ô∏è Could not automatically find the Scene class name in the generated code.")
            print(f"   Please inspect '{args.output}' and render it manually using:")
            print(f"   manim -pq{args.quality} {args.output} <YourClassName>")

if __name__ == "__main__":
    main()